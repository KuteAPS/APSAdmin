using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Models
{
	/// <summary>
	/// Strongly-typed collection for the TBasisTaskList class.
	/// </summary>
    [Serializable]
	public partial class TBasisTaskListCollection : ActiveList<TBasisTaskList, TBasisTaskListCollection>
	{	   
		public TBasisTaskListCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisTaskListCollection</returns>
		public TBasisTaskListCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisTaskList o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_TaskList table.
	/// </summary>
	[Serializable]
	public partial class TBasisTaskList : ActiveRecord<TBasisTaskList>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisTaskList()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisTaskList(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisTaskList(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisTaskList(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_TaskList", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarTaskContext = new TableSchema.TableColumn(schema);
				colvarTaskContext.ColumnName = "TaskContext";
				colvarTaskContext.DataType = DbType.String;
				colvarTaskContext.MaxLength = -1;
				colvarTaskContext.AutoIncrement = false;
				colvarTaskContext.IsNullable = true;
				colvarTaskContext.IsPrimaryKey = false;
				colvarTaskContext.IsForeignKey = false;
				colvarTaskContext.IsReadOnly = false;
				colvarTaskContext.DefaultSetting = @"";
				colvarTaskContext.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaskContext);
				
				TableSchema.TableColumn colvarTaskType = new TableSchema.TableColumn(schema);
				colvarTaskType.ColumnName = "TaskType";
				colvarTaskType.DataType = DbType.String;
				colvarTaskType.MaxLength = 255;
				colvarTaskType.AutoIncrement = false;
				colvarTaskType.IsNullable = true;
				colvarTaskType.IsPrimaryKey = false;
				colvarTaskType.IsForeignKey = false;
				colvarTaskType.IsReadOnly = false;
				colvarTaskType.DefaultSetting = @"";
				colvarTaskType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaskType);
				
				TableSchema.TableColumn colvarCreateUser = new TableSchema.TableColumn(schema);
				colvarCreateUser.ColumnName = "CreateUser";
				colvarCreateUser.DataType = DbType.Int32;
				colvarCreateUser.MaxLength = 0;
				colvarCreateUser.AutoIncrement = false;
				colvarCreateUser.IsNullable = true;
				colvarCreateUser.IsPrimaryKey = false;
				colvarCreateUser.IsForeignKey = false;
				colvarCreateUser.IsReadOnly = false;
				colvarCreateUser.DefaultSetting = @"";
				colvarCreateUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateUser);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "CreateDate";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarTaskState = new TableSchema.TableColumn(schema);
				colvarTaskState.ColumnName = "TaskState";
				colvarTaskState.DataType = DbType.String;
				colvarTaskState.MaxLength = 50;
				colvarTaskState.AutoIncrement = false;
				colvarTaskState.IsNullable = true;
				colvarTaskState.IsPrimaryKey = false;
				colvarTaskState.IsForeignKey = false;
				colvarTaskState.IsReadOnly = false;
				colvarTaskState.DefaultSetting = @"";
				colvarTaskState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTaskState);
				
				TableSchema.TableColumn colvarAssignUser = new TableSchema.TableColumn(schema);
				colvarAssignUser.ColumnName = "AssignUser";
				colvarAssignUser.DataType = DbType.Int32;
				colvarAssignUser.MaxLength = 0;
				colvarAssignUser.AutoIncrement = false;
				colvarAssignUser.IsNullable = true;
				colvarAssignUser.IsPrimaryKey = false;
				colvarAssignUser.IsForeignKey = false;
				colvarAssignUser.IsReadOnly = false;
				colvarAssignUser.DefaultSetting = @"";
				colvarAssignUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignUser);
				
				TableSchema.TableColumn colvarUpdateDataUsers = new TableSchema.TableColumn(schema);
				colvarUpdateDataUsers.ColumnName = "UpdateDataUsers";
				colvarUpdateDataUsers.DataType = DbType.String;
				colvarUpdateDataUsers.MaxLength = 100;
				colvarUpdateDataUsers.AutoIncrement = false;
				colvarUpdateDataUsers.IsNullable = true;
				colvarUpdateDataUsers.IsPrimaryKey = false;
				colvarUpdateDataUsers.IsForeignKey = false;
				colvarUpdateDataUsers.IsReadOnly = false;
				colvarUpdateDataUsers.DefaultSetting = @"";
				colvarUpdateDataUsers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdateDataUsers);
				
				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "StartTime";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);
				
				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "EndTime";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_TaskList",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("TaskContext")]
		[Bindable(true)]
		public string TaskContext 
		{
			get { return GetColumnValue<string>(Columns.TaskContext); }
			set { SetColumnValue(Columns.TaskContext, value); }
		}
		  
		[XmlAttribute("TaskType")]
		[Bindable(true)]
		public string TaskType 
		{
			get { return GetColumnValue<string>(Columns.TaskType); }
			set { SetColumnValue(Columns.TaskType, value); }
		}
		  
		[XmlAttribute("CreateUser")]
		[Bindable(true)]
		public int? CreateUser 
		{
			get { return GetColumnValue<int?>(Columns.CreateUser); }
			set { SetColumnValue(Columns.CreateUser, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("TaskState")]
		[Bindable(true)]
		public string TaskState 
		{
			get { return GetColumnValue<string>(Columns.TaskState); }
			set { SetColumnValue(Columns.TaskState, value); }
		}
		  
		[XmlAttribute("AssignUser")]
		[Bindable(true)]
		public int? AssignUser 
		{
			get { return GetColumnValue<int?>(Columns.AssignUser); }
			set { SetColumnValue(Columns.AssignUser, value); }
		}
		  
		[XmlAttribute("UpdateDataUsers")]
		[Bindable(true)]
		public string UpdateDataUsers 
		{
			get { return GetColumnValue<string>(Columns.UpdateDataUsers); }
			set { SetColumnValue(Columns.UpdateDataUsers, value); }
		}
		  
		[XmlAttribute("StartTime")]
		[Bindable(true)]
		public DateTime? StartTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set { SetColumnValue(Columns.StartTime, value); }
		}
		  
		[XmlAttribute("EndTime")]
		[Bindable(true)]
		public DateTime? EndTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varTaskContext,string varTaskType,int? varCreateUser,DateTime? varCreateDate,string varTaskState,int? varAssignUser,string varUpdateDataUsers,DateTime? varStartTime,DateTime? varEndTime)
		{
			TBasisTaskList item = new TBasisTaskList();
			
			item.TaskContext = varTaskContext;
			
			item.TaskType = varTaskType;
			
			item.CreateUser = varCreateUser;
			
			item.CreateDate = varCreateDate;
			
			item.TaskState = varTaskState;
			
			item.AssignUser = varAssignUser;
			
			item.UpdateDataUsers = varUpdateDataUsers;
			
			item.StartTime = varStartTime;
			
			item.EndTime = varEndTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varTaskContext,string varTaskType,int? varCreateUser,DateTime? varCreateDate,string varTaskState,int? varAssignUser,string varUpdateDataUsers,DateTime? varStartTime,DateTime? varEndTime)
		{
			TBasisTaskList item = new TBasisTaskList();
			
				item.Id = varId;
			
				item.TaskContext = varTaskContext;
			
				item.TaskType = varTaskType;
			
				item.CreateUser = varCreateUser;
			
				item.CreateDate = varCreateDate;
			
				item.TaskState = varTaskState;
			
				item.AssignUser = varAssignUser;
			
				item.UpdateDataUsers = varUpdateDataUsers;
			
				item.StartTime = varStartTime;
			
				item.EndTime = varEndTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TaskContextColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TaskTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateUserColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TaskStateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignUserColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdateDataUsersColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn StartTimeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn EndTimeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string TaskContext = @"TaskContext";
			 public static string TaskType = @"TaskType";
			 public static string CreateUser = @"CreateUser";
			 public static string CreateDate = @"CreateDate";
			 public static string TaskState = @"TaskState";
			 public static string AssignUser = @"AssignUser";
			 public static string UpdateDataUsers = @"UpdateDataUsers";
			 public static string StartTime = @"StartTime";
			 public static string EndTime = @"EndTime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
