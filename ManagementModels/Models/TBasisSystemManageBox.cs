using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Models
{
	/// <summary>
	/// Strongly-typed collection for the TBasisSystemManageBox class.
	/// </summary>
    [Serializable]
	public partial class TBasisSystemManageBoxCollection : ActiveList<TBasisSystemManageBox, TBasisSystemManageBoxCollection>
	{	   
		public TBasisSystemManageBoxCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBasisSystemManageBoxCollection</returns>
		public TBasisSystemManageBoxCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBasisSystemManageBox o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Basis_SystemManageBox table.
	/// </summary>
	[Serializable]
	public partial class TBasisSystemManageBox : ActiveRecord<TBasisSystemManageBox>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBasisSystemManageBox()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBasisSystemManageBox(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBasisSystemManageBox(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBasisSystemManageBox(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Basis_SystemManageBox", TableType.Table, DataService.GetInstance("Nowthwin"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSendUserId = new TableSchema.TableColumn(schema);
				colvarSendUserId.ColumnName = "SendUserId";
				colvarSendUserId.DataType = DbType.Int32;
				colvarSendUserId.MaxLength = 0;
				colvarSendUserId.AutoIncrement = false;
				colvarSendUserId.IsNullable = false;
				colvarSendUserId.IsPrimaryKey = false;
				colvarSendUserId.IsForeignKey = false;
				colvarSendUserId.IsReadOnly = false;
				colvarSendUserId.DefaultSetting = @"";
				colvarSendUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendUserId);
				
				TableSchema.TableColumn colvarRecipientUserID = new TableSchema.TableColumn(schema);
				colvarRecipientUserID.ColumnName = "RecipientUserID";
				colvarRecipientUserID.DataType = DbType.Int32;
				colvarRecipientUserID.MaxLength = 0;
				colvarRecipientUserID.AutoIncrement = false;
				colvarRecipientUserID.IsNullable = false;
				colvarRecipientUserID.IsPrimaryKey = false;
				colvarRecipientUserID.IsForeignKey = false;
				colvarRecipientUserID.IsReadOnly = false;
				colvarRecipientUserID.DefaultSetting = @"";
				colvarRecipientUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRecipientUserID);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 500;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarContent = new TableSchema.TableColumn(schema);
				colvarContent.ColumnName = "Content";
				colvarContent.DataType = DbType.AnsiString;
				colvarContent.MaxLength = 2147483647;
				colvarContent.AutoIncrement = false;
				colvarContent.IsNullable = false;
				colvarContent.IsPrimaryKey = false;
				colvarContent.IsForeignKey = false;
				colvarContent.IsReadOnly = false;
				colvarContent.DefaultSetting = @"";
				colvarContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContent);
				
				TableSchema.TableColumn colvarReding = new TableSchema.TableColumn(schema);
				colvarReding.ColumnName = "Reding";
				colvarReding.DataType = DbType.Int32;
				colvarReding.MaxLength = 0;
				colvarReding.AutoIncrement = false;
				colvarReding.IsNullable = false;
				colvarReding.IsPrimaryKey = false;
				colvarReding.IsForeignKey = false;
				colvarReding.IsReadOnly = false;
				
						colvarReding.DefaultSetting = @"((0))";
				colvarReding.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReding);
				
				TableSchema.TableColumn colvarSendState = new TableSchema.TableColumn(schema);
				colvarSendState.ColumnName = "SendState";
				colvarSendState.DataType = DbType.Int32;
				colvarSendState.MaxLength = 0;
				colvarSendState.AutoIncrement = false;
				colvarSendState.IsNullable = false;
				colvarSendState.IsPrimaryKey = false;
				colvarSendState.IsForeignKey = false;
				colvarSendState.IsReadOnly = false;
				
						colvarSendState.DefaultSetting = @"((0))";
				colvarSendState.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendState);
				
				TableSchema.TableColumn colvarCreateTime = new TableSchema.TableColumn(schema);
				colvarCreateTime.ColumnName = "CreateTime";
				colvarCreateTime.DataType = DbType.DateTime;
				colvarCreateTime.MaxLength = 0;
				colvarCreateTime.AutoIncrement = false;
				colvarCreateTime.IsNullable = false;
				colvarCreateTime.IsPrimaryKey = false;
				colvarCreateTime.IsForeignKey = false;
				colvarCreateTime.IsReadOnly = false;
				
						colvarCreateTime.DefaultSetting = @"(getdate())";
				colvarCreateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Nowthwin"].AddSchema("T_Basis_SystemManageBox",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("SendUserId")]
		[Bindable(true)]
		public int SendUserId 
		{
			get { return GetColumnValue<int>(Columns.SendUserId); }
			set { SetColumnValue(Columns.SendUserId, value); }
		}
		  
		[XmlAttribute("RecipientUserID")]
		[Bindable(true)]
		public int RecipientUserID 
		{
			get { return GetColumnValue<int>(Columns.RecipientUserID); }
			set { SetColumnValue(Columns.RecipientUserID, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Content")]
		[Bindable(true)]
		public string Content 
		{
			get { return GetColumnValue<string>(Columns.Content); }
			set { SetColumnValue(Columns.Content, value); }
		}
		  
		[XmlAttribute("Reding")]
		[Bindable(true)]
		public int Reding 
		{
			get { return GetColumnValue<int>(Columns.Reding); }
			set { SetColumnValue(Columns.Reding, value); }
		}
		  
		[XmlAttribute("SendState")]
		[Bindable(true)]
		public int SendState 
		{
			get { return GetColumnValue<int>(Columns.SendState); }
			set { SetColumnValue(Columns.SendState, value); }
		}
		  
		[XmlAttribute("CreateTime")]
		[Bindable(true)]
		public DateTime CreateTime 
		{
			get { return GetColumnValue<DateTime>(Columns.CreateTime); }
			set { SetColumnValue(Columns.CreateTime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varSendUserId,int varRecipientUserID,string varTitle,string varContent,int varReding,int varSendState,DateTime varCreateTime)
		{
			TBasisSystemManageBox item = new TBasisSystemManageBox();
			
			item.SendUserId = varSendUserId;
			
			item.RecipientUserID = varRecipientUserID;
			
			item.Title = varTitle;
			
			item.Content = varContent;
			
			item.Reding = varReding;
			
			item.SendState = varSendState;
			
			item.CreateTime = varCreateTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varSendUserId,int varRecipientUserID,string varTitle,string varContent,int varReding,int varSendState,DateTime varCreateTime)
		{
			TBasisSystemManageBox item = new TBasisSystemManageBox();
			
				item.Id = varId;
			
				item.SendUserId = varSendUserId;
			
				item.RecipientUserID = varRecipientUserID;
			
				item.Title = varTitle;
			
				item.Content = varContent;
			
				item.Reding = varReding;
			
				item.SendState = varSendState;
			
				item.CreateTime = varCreateTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SendUserIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RecipientUserIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ContentColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RedingColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SendStateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateTimeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string SendUserId = @"SendUserId";
			 public static string RecipientUserID = @"RecipientUserID";
			 public static string Title = @"Title";
			 public static string Content = @"Content";
			 public static string Reding = @"Reding";
			 public static string SendState = @"SendState";
			 public static string CreateTime = @"CreateTime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
